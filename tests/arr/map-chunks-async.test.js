// Tests generated by ChatGPT on 21 June 2025.

module.exports = ({ test, assert }) => lib => {

    const asyncDouble = async x => x * 2;

    test('processes all items in chunks', async () => {
        const input = [1, 2, 3, 4];
        const result = await lib.arr.mapChunksAsync(input, 2, true, asyncDouble);
        assert.deepEqual(result, [2, 4, 6, 8]);
    });

    test('handles empty input array', async () => {
        const result = await lib.arr.mapChunksAsync([], 3, true, asyncDouble);
        assert.deepEqual(result, []);
    });

    test('respects chunkSize', async () => {
        const calls = [];
        const spy = async x => {
            calls.push(x);
            return x + 1;
        };
        await lib.arr.mapChunksAsync([1, 2, 3, 4, 5], 2, true, spy);
        assert.equal(calls.length, 5);
    });

    test('respects boolean loopPredicate = false (no items processed)', async () => {
        const calls = [];
        const spy = async x => {
            calls.push(x);
            return x;
        };
        const result = await lib.arr.mapChunksAsync([1, 2, 3], 2, false, spy);
        assert.deepEqual(result, []);
        assert.equal(calls.length, 0);
    });

    test('respects function loopPredicate (stops early)', async () => {
        let count = 0;
        const loopPredicate = () => count++ < 2;
        const result = await lib.arr.mapChunksAsync([10, 20, 30, 40], 2, loopPredicate, async x => x);
        assert.deepEqual(result, [10, 20]);
    });

    test('trims mid-chunk if loopPredicate becomes false', async () => {
        let count = 0;
        const loopPredicate = () => count++ < 3;
        const result = await lib.arr.mapChunksAsync([1, 2, 3, 4, 5], 3, loopPredicate, async x => x);
        assert.deepEqual(result, [1, 2, 3]);
    });

}
